2019-12-15 12:15:06.511 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarting :: Starting SearchFoodApplication on eason-UX410UQK with PID 8485 (/home/eason/Desktop/Workplace/Projects/SearchFoodBackend/target/classes started by eason in /home/eason/Desktop/Workplace/Projects/SearchFoodBackend)
2019-12-15 12:15:06.543 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStartupProfileInfo :: No active profile set, falling back to default profiles: default
2019-12-15 12:15:07.897 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel :: No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2019-12-15 12:15:07.905 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler :: No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2019-12-15 12:15:07.914 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerHeaderChannelRegistry :: No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2019-12-15 12:15:08.055 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ec108888] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:15:08.085 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration$$EnhancerBySpringCGLIB$$570243b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:15:08.106 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:15:08.485 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.initialize :: Tomcat initialized with port(s): 2020 (http)
2019-12-15 12:15:08.533 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardService.log :: Starting service [Tomcat]
2019-12-15 12:15:08.533 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardEngine.log :: Starting Servlet engine: [Apache Tomcat/9.0.22]
2019-12-15 12:15:08.637 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring embedded WebApplicationContext
2019-12-15 12:15:08.638 [34mINFO[0;39m [35m[main][0;39m o.s.w.c.ContextLoader.prepareWebApplicationContext :: Root WebApplicationContext: initialization completed in 2026 ms
2019-12-15 12:15:08.958 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Starting...
2019-12-15 12:15:09.660 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Start completed.
2019-12-15 12:15:10.120 [39mDEBUG[0;39m [35m[main][0;39m c.s.S.u.f.FileStorageService.<init> :: fileStorageLocation: src/main/resources/uploads/images
2019-12-15 12:15:10.484 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskExecutor.initialize :: Initializing ExecutorService 'applicationTaskExecutor'
2019-12-15 12:15:10.891 [34mINFO[0;39m [35m[main][0;39m o.s.b.a.e.w.EndpointLinksResolver.<init> :: Exposing 2 endpoint(s) beneath base path '/actuator'
2019-12-15 12:15:10.977 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskScheduler.initialize :: Initializing ExecutorService 'taskScheduler'
2019-12-15 12:15:11.045 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 12:15:11.046 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 1 subscriber(s).
2019-12-15 12:15:11.046 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.start :: started _org.springframework.integration.errorLogger
2019-12-15 12:15:11.110 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.start :: Tomcat started on port(s): 2020 (http) with context path ''
2019-12-15 12:15:11.113 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarted :: Started SearchFoodApplication in 5.438 seconds (JVM running for 10.24)
2019-12-15 12:15:25.561 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-15 12:15:25.562 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Initializing Servlet 'dispatcherServlet'
2019-12-15 12:15:25.574 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Completed initialization in 12 ms
2019-12-15 12:15:25.693 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.LoginController.login :: TESTING logging: username: Admin@test.com  password: 123343223 browser: IE
2019-12-15 12:15:25.693 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.LoginController.login :: username: Admin@test.com, password: 123343223send request to login
2019-12-15 12:15:25.752 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.TokenRecordsImp.isExist :: Admin@test.com not founded.
2019-12-15 12:15:25.753 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.LoginController.login :: Not Founded
2019-12-15 12:15:25.756 [31mWARN[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.e.ControllerException.handleDataNotFoundException :: In ControllerException: NotFoundException
2019-12-15 12:15:37.677 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Removing {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 12:15:37.680 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 0 subscriber(s).
2019-12-15 12:15:37.682 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.stop :: stopped _org.springframework.integration.errorLogger
2019-12-15 12:15:37.687 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskScheduler.shutdown :: Shutting down ExecutorService 'taskScheduler'
2019-12-15 12:15:37.706 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskExecutor.shutdown :: Shutting down ExecutorService 'applicationTaskExecutor'
2019-12-15 12:15:37.714 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown initiated...
2019-12-15 12:15:37.763 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown completed.
2019-12-15 12:15:44.423 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarting :: Starting SearchFoodApplication on eason-UX410UQK with PID 8576 (/home/eason/Desktop/Workplace/Projects/SearchFoodBackend/target/classes started by eason in /home/eason/Desktop/Workplace/Projects/SearchFoodBackend)
2019-12-15 12:15:44.426 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStartupProfileInfo :: No active profile set, falling back to default profiles: default
2019-12-15 12:15:45.960 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel :: No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2019-12-15 12:15:45.969 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler :: No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2019-12-15 12:15:45.976 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerHeaderChannelRegistry :: No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2019-12-15 12:15:46.119 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a281ad8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:15:46.142 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration$$EnhancerBySpringCGLIB$$7519d607] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:15:46.156 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:15:46.510 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.initialize :: Tomcat initialized with port(s): 2020 (http)
2019-12-15 12:15:46.543 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardService.log :: Starting service [Tomcat]
2019-12-15 12:15:46.544 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardEngine.log :: Starting Servlet engine: [Apache Tomcat/9.0.22]
2019-12-15 12:15:46.638 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring embedded WebApplicationContext
2019-12-15 12:15:46.638 [34mINFO[0;39m [35m[main][0;39m o.s.w.c.ContextLoader.prepareWebApplicationContext :: Root WebApplicationContext: initialization completed in 2151 ms
2019-12-15 12:15:46.874 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Starting...
2019-12-15 12:15:47.487 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Start completed.
2019-12-15 12:15:47.924 [39mDEBUG[0;39m [35m[main][0;39m c.s.S.u.f.FileStorageService.<init> :: fileStorageLocation: src/main/resources/uploads/images
2019-12-15 12:15:48.222 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskExecutor.initialize :: Initializing ExecutorService 'applicationTaskExecutor'
2019-12-15 12:15:48.784 [34mINFO[0;39m [35m[main][0;39m o.s.b.a.e.w.EndpointLinksResolver.<init> :: Exposing 2 endpoint(s) beneath base path '/actuator'
2019-12-15 12:15:48.887 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskScheduler.initialize :: Initializing ExecutorService 'taskScheduler'
2019-12-15 12:15:48.964 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 12:15:48.965 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 1 subscriber(s).
2019-12-15 12:15:48.966 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.start :: started _org.springframework.integration.errorLogger
2019-12-15 12:15:49.031 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.start :: Tomcat started on port(s): 2020 (http) with context path ''
2019-12-15 12:15:49.035 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarted :: Started SearchFoodApplication in 5.293 seconds (JVM running for 9.633)
2019-12-15 12:15:59.527 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-15 12:15:59.528 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Initializing Servlet 'dispatcherServlet'
2019-12-15 12:15:59.547 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Completed initialization in 19 ms
2019-12-15 12:15:59.723 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.LoginController.login :: TESTING logging: username: Admin@test1.com  password: 123343223 browser: IE
2019-12-15 12:15:59.724 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.LoginController.login :: username: Admin@test1.com, password: 123343223send request to login
2019-12-15 12:15:59.795 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.TokenRecordsImp.isExist :: Member Admin@test1.com founded.
2019-12-15 12:16:12.885 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Processing getStoreTypes...
2019-12-15 12:16:12.886 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:16:12.899 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:16:12.897Z
2019-12-15 12:16:12.900 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:16:12.901 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 0
2019-12-15 12:16:12.903 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:16:12.903 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:16:12.905 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Valid token
2019-12-15 12:16:12.905 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Trying to load the food types from databases...
2019-12-15 12:16:12.915 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: start to get data...
2019-12-15 12:16:12.916 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: query data from database in the form of List...
2019-12-15 12:16:12.922 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: Start to change List to JSONArray...
2019-12-15 12:16:12.922 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.toMap :: forEach...
2019-12-15 12:16:12.924 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.toMap :: resultMap {速食=[麥當勞, 肯德基, 胖老爹, 頂呱呱], 麵食=[陽春麵, 涼麵, 油麵, 義大利麵, 拉麵], 飯=[三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]}
2019-12-15 12:16:12.925 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: Finished
2019-12-15 12:16:21.738 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:16:21.739 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:16:21.739 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:16:21.740 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:16:21.742 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:16:21.742Z
2019-12-15 12:16:21.743 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:16:21.743 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 0
2019-12-15 12:16:21.744 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:16:21.744 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:16:21.744 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:16:21.745 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:16:21.768 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:16:21.767
2019-12-15 12:16:21.768 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:16:21.781 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 1
2019-12-15 12:16:21.782 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:16:21.784 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:16:21.785 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:16:21.786 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:16:21.801 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:16:49.209 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:16:49.210 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:16:49.210 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:16:49.210 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:16:49.239 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:16:49.239Z
2019-12-15 12:16:49.240 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:16:49.240 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 0
2019-12-15 12:16:49.240 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:16:49.240 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:16:49.240 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:16:49.240 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:16:49.241 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:16:49.241
2019-12-15 12:16:49.242 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [麵食, 飯]
2019-12-15 12:16:49.245 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 2
2019-12-15 12:16:49.246 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:16:49.250 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:16:49.252 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:16:49.254 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:16:49.270 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:17:13.669 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:17:13.669 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:17:13.670 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:17:13.670 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:17:13.672 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:17:13.672Z
2019-12-15 12:17:13.673 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:17:13.673 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 1
2019-12-15 12:17:13.673 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:17:13.674 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:17:13.674 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:17:13.674 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:17:13.676 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:17:13.676
2019-12-15 12:17:13.677 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 飯]
2019-12-15 12:17:13.682 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 3
2019-12-15 12:17:13.684 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:17:13.686 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:17:13.688 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:13.688 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:13.700 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:17:17.999 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:17:18.000 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:17:18.000 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:17:18.000 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:17:18.002 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:17:18.002Z
2019-12-15 12:17:18.003 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:17:18.003 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 1
2019-12-15 12:17:18.004 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:17:18.004 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:17:18.004 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:17:18.005 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:17:18.006 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:17:18.006
2019-12-15 12:17:18.006 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 飯]
2019-12-15 12:17:18.008 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 4
2019-12-15 12:17:18.009 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:17:18.011 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:17:18.011 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:18.012 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:18.021 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:17:24.247 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:17:24.248 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:17:24.248 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:17:24.248 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:17:24.250 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:17:24.250Z
2019-12-15 12:17:24.251 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:17:24.251 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 1
2019-12-15 12:17:24.252 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:17:24.252 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:17:24.252 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:17:24.252 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:17:24.253 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:17:24.253
2019-12-15 12:17:24.253 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 飯]
2019-12-15 12:17:24.255 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 5
2019-12-15 12:17:24.256 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:17:24.257 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:17:24.259 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:24.259 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:24.271 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:17:44.532 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:17:44.533 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:17:44.533 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:17:44.533 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:17:44.535 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:17:44.535Z
2019-12-15 12:17:44.536 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:17:44.537 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 1
2019-12-15 12:17:44.537 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:17:44.538 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:17:44.538 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:17:44.539 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:17:44.547 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:17:44.547
2019-12-15 12:17:44.548 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 飯]
2019-12-15 12:17:44.551 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 6
2019-12-15 12:17:44.551 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:17:44.552 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:17:44.553 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:44.554 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 4, 5, 2, 3, 1]
2019-12-15 12:17:44.579 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:18:03.274 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:18:03.276 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:18:03.276 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:18:03.276 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:18:03.280 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:18:03.280Z
2019-12-15 12:18:03.280 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:18:03.281 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 2
2019-12-15 12:18:03.281 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:18:03.281 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:18:03.282 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:18:03.282 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:18:03.283 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:18:03.283
2019-12-15 12:18:03.284 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:18:03.292 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 7
2019-12-15 12:18:03.292 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:18:03.294 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 三寶飯]
2019-12-15 12:18:03.295 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 1]
2019-12-15 12:18:03.295 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 1]
2019-12-15 12:18:03.309 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:18:12.462 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:18:12.462 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:18:12.462 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:18:12.462 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:18:12.464 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:18:12.464Z
2019-12-15 12:18:12.465 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:18:12.465 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 2
2019-12-15 12:18:12.465 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:18:12.466 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:18:12.466 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:18:12.466 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:18:12.468 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:18:12.468
2019-12-15 12:18:12.468 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:18:12.471 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 8
2019-12-15 12:18:12.471 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:18:12.473 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 三寶飯]
2019-12-15 12:18:12.475 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 1]
2019-12-15 12:18:12.477 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 1]
2019-12-15 12:18:12.486 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:18:21.418 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:18:21.418 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:18:21.419 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:18:21.419 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:18:21.427 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:18:21.427Z
2019-12-15 12:18:21.428 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:18:21.428 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 2
2019-12-15 12:18:21.429 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:18:21.429 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:18:21.429 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:18:21.429 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:18:21.430 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:18:21.43
2019-12-15 12:18:21.431 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:18:21.432 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 9
2019-12-15 12:18:21.433 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:18:21.435 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 三寶飯]
2019-12-15 12:18:21.436 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 1]
2019-12-15 12:18:21.437 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 1]
2019-12-15 12:18:21.460 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:18:46.212 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:18:46.213 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:18:46.213 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:18:46.213 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:18:46.215 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:18:46.215Z
2019-12-15 12:18:46.216 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:18:46.216 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 2
2019-12-15 12:18:46.216 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:18:46.217 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:18:46.217 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:18:46.217 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:18:46.218 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:18:46.218
2019-12-15 12:18:46.218 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食]
2019-12-15 12:18:46.220 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 10
2019-12-15 12:18:46.220 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:18:46.222 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵]
2019-12-15 12:18:46.222 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:18:46.222 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:18:46.236 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:18:57.738 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:18:57.738 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:18:57.738 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:18:57.739 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:18:57.741 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:18:57.740Z
2019-12-15 12:18:57.741 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:18:57.742 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 2
2019-12-15 12:18:57.742 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:18:57.743 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:18:57.743 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:18:57.743 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:18:57.744 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:18:57.744
2019-12-15 12:18:57.745 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食]
2019-12-15 12:18:57.747 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 11
2019-12-15 12:18:57.748 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:18:57.750 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵]
2019-12-15 12:18:57.750 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:18:57.751 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:18:57.760 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:19:21.216 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:19:21.216 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:19:21.216 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:19:21.217 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:19:21.222 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:19:21.222Z
2019-12-15 12:19:21.222 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:19:21.223 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 3
2019-12-15 12:19:21.223 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:19:21.223 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:19:21.223 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:19:21.223 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:19:21.226 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:19:21.226
2019-12-15 12:19:21.226 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食]
2019-12-15 12:19:21.229 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 12
2019-12-15 12:19:21.230 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:19:21.235 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵]
2019-12-15 12:19:21.236 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:19:21.236 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:19:21.248 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:19:38.159 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:19:38.160 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:19:38.160 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:19:38.160 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:19:38.162 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:19:38.162Z
2019-12-15 12:19:38.162 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:19:38.163 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 3
2019-12-15 12:19:38.163 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:19:38.163 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:19:38.163 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:19:38.164 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:19:38.165 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:19:38.165
2019-12-15 12:19:38.165 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [麵食, 飯]
2019-12-15 12:19:38.169 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 13
2019-12-15 12:19:38.169 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:19:38.170 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:19:38.171 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:19:38.171 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:19:38.187 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:19:51.985 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:19:51.985 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:19:51.986 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:19:51.986 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:19:51.990 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:19:51.990Z
2019-12-15 12:19:51.990 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:19:51.991 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 3
2019-12-15 12:19:51.991 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:19:51.991 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:19:51.991 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:19:51.992 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:19:51.992 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:19:51.992
2019-12-15 12:19:51.993 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [麵食, 飯]
2019-12-15 12:19:51.995 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 14
2019-12-15 12:19:51.995 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:19:51.998 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:19:51.999 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:19:52.000 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:19:52.016 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:20:11.784 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:20:11.784 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:20:11.785 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:20:11.785 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:20:11.787 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:20:11.787Z
2019-12-15 12:20:11.787 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:20:11.788 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 4
2019-12-15 12:20:11.788 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:20:11.788 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:20:11.789 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:20:11.789 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:20:11.790 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:20:11.79
2019-12-15 12:20:11.791 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:20:11.793 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 15
2019-12-15 12:20:11.795 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:20:11.797 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:20:11.797 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:20:11.798 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:20:11.812 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:20:57.001 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:20:57.002 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:20:57.002 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:20:57.002 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:20:57.004 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:20:57.004Z
2019-12-15 12:20:57.005 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:20:57.005 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 4
2019-12-15 12:20:57.005 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:20:57.006 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:20:57.006 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:20:57.006 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:20:57.008 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:20:57.008
2019-12-15 12:20:57.009 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:20:57.011 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 16
2019-12-15 12:20:57.011 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:20:57.014 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:20:57.015 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 7, 4, 5, 2, 3, 1]
2019-12-15 12:20:57.016 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 7, 4, 5, 2, 3, 1]
2019-12-15 12:20:57.031 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:21:15.566 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:21:15.566 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:21:15.566 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:21:15.566 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:21:15.568 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:21:15.568Z
2019-12-15 12:21:15.568 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:21:15.568 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 5
2019-12-15 12:21:15.568 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:21:15.569 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:21:15.569 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:21:15.569 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:21:15.570 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:21:15.57
2019-12-15 12:21:15.570 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:21:15.575 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 17
2019-12-15 12:21:15.575 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:21:15.583 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:21:15.583 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 7, 4, 5, 2, 3, 1]
2019-12-15 12:21:15.584 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 7, 4, 5, 2, 3, 1]
2019-12-15 12:21:15.602 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:21:34.195 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:21:34.196 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:21:34.196 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:21:34.196 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:21:34.198 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:21:34.198Z
2019-12-15 12:21:34.198 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:21:34.198 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 5
2019-12-15 12:21:34.199 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:21:34.199 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:21:34.199 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:21:34.199 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:21:34.200 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:21:34.2
2019-12-15 12:21:34.200 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [飯]
2019-12-15 12:21:34.202 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 18
2019-12-15 12:21:34.202 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:21:34.204 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:21:34.205 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [4, 5, 2, 3, 1]
2019-12-15 12:21:34.205 [39mDEBUG[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[4, 5, 2, 3, 1]
2019-12-15 12:21:34.216 [34mINFO[0;39m [35m[http-nio-2020-exec-10][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:21:54.814 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:21:54.814 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:21:54.815 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:21:54.815 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:21:54.820 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:21:54.820Z
2019-12-15 12:21:54.821 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:21:54.821 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 5
2019-12-15 12:21:54.821 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:21:54.822 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:21:54.822 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:21:54.822 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:21:54.827 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:21:54.826
2019-12-15 12:21:54.827 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食]
2019-12-15 12:21:54.829 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 19
2019-12-15 12:21:54.830 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:21:54.831 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹]
2019-12-15 12:21:54.832 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14]
2019-12-15 12:21:54.832 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14]
2019-12-15 12:21:54.842 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:22:03.188 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:22:03.188 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:22:03.189 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:22:03.189 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:22:03.191 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:22:03.191Z
2019-12-15 12:22:03.191 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:22:03.191 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 6
2019-12-15 12:22:03.192 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:22:03.192 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:22:03.192 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:22:03.192 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:22:03.193 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:22:03.193
2019-12-15 12:22:03.193 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:22:03.195 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 20
2019-12-15 12:22:03.197 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:22:03.199 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:22:03.200 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:03.200 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:03.228 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:22:20.821 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:22:20.821 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:22:20.821 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:22:20.822 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:22:20.827 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:22:20.827Z
2019-12-15 12:22:20.827 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:22:20.827 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 6
2019-12-15 12:22:20.828 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:22:20.828 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:22:20.828 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:22:20.828 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:22:20.830 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:22:20.83
2019-12-15 12:22:20.831 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:22:20.832 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 21
2019-12-15 12:22:20.833 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:22:20.833 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:22:20.834 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:20.834 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:20.846 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:22:31.573 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:22:31.574 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:22:31.574 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:22:31.574 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:22:31.576 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:22:31.576Z
2019-12-15 12:22:31.576 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:22:31.576 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 6
2019-12-15 12:22:31.577 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:22:31.577 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:22:31.577 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:22:31.577 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:22:31.578 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:22:31.578
2019-12-15 12:22:31.579 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:22:31.581 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 22
2019-12-15 12:22:31.583 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:22:31.584 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:22:31.585 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:31.585 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:31.598 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:22:36.821 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:22:36.821 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:22:36.822 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:22:36.822 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:22:36.823 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:22:36.823Z
2019-12-15 12:22:36.824 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:22:36.824 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 6
2019-12-15 12:22:36.824 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:22:36.824 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:22:36.825 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:22:36.825 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:22:36.825 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:22:36.825
2019-12-15 12:22:36.826 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:22:36.827 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 23
2019-12-15 12:22:36.828 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:22:36.829 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:22:36.829 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:36.830 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:22:36.841 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:22:57.226 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:22:57.227 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:22:57.227 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:22:57.227 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:22:57.229 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:22:57.229Z
2019-12-15 12:22:57.230 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:22:57.230 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 6
2019-12-15 12:22:57.230 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:22:57.231 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:22:57.231 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:22:57.231 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:22:57.232 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:22:57.232
2019-12-15 12:22:57.232 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食]
2019-12-15 12:22:57.234 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 24
2019-12-15 12:22:57.234 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:22:57.247 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵]
2019-12-15 12:22:57.248 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:22:57.248 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7]
2019-12-15 12:22:57.256 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:23:21.440 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:23:21.441 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:23:21.441 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:23:21.441 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:23:21.443 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:23:21.443Z
2019-12-15 12:23:21.443 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:23:21.444 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 7
2019-12-15 12:23:21.444 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:23:21.445 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:23:21.445 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:23:21.445 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:23:21.446 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:23:21.446
2019-12-15 12:23:21.447 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [麵食]
2019-12-15 12:23:21.448 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 25
2019-12-15 12:23:21.449 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:23:21.450 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵]
2019-12-15 12:23:21.455 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [9, 8, 10, 7]
2019-12-15 12:23:21.455 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[9, 8, 10, 7]
2019-12-15 12:23:21.462 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:23:55.358 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:23:55.358 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:23:55.358 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:23:55.358 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:23:55.360 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:23:55.360Z
2019-12-15 12:23:55.360 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:23:55.360 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 7
2019-12-15 12:23:55.361 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:23:55.361 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:23:55.361 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:23:55.361 [34mINFO[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:23:55.362 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:23:55.362
2019-12-15 12:23:55.362 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:23:55.485 [1;31mERROR[0;39m [35m[http-nio-2020-exec-8][0;39m o.a.c.c.C.[.[.[.[dispatcherServlet].log :: Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; Duplicate entry '台中市-西屯區-台灣大道六段12號' for key 'city'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '台中市-西屯區-台灣大道六段12號' for key 'city'] with root cause
java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '台中市-西屯區-台灣大道六段12號' for key 'city'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1092)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1040)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1340)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1025)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$update$1(JdbcTemplate.java:893)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:616)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:892)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp.save(StoreInfoImp.java:78)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp.createNewStoreInfoToDatabase(StoreInfoImp.java:67)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp$$FastClassBySpringCGLIB$$311c6bdd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp$$EnhancerBySpringCGLIB$$984dad15.createNewStoreInfoToDatabase(<generated>)
	at com.searchfood.SearchFoodBackend.model.StoreInfoTransactionImp.createNewStoreInfoToDatabase(StoreInfoTransactionImp.java:29)
	at com.searchfood.SearchFoodBackend.model.StoreInfoTransactionImp$$FastClassBySpringCGLIB$$d6a09f5d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.searchfood.SearchFoodBackend.model.StoreInfoTransactionImp$$EnhancerBySpringCGLIB$$3350a9f0.createNewStoreInfoToDatabase(<generated>)
	at com.searchfood.SearchFoodBackend.webapi.StoreInfoController.createNewStoreInfo(StoreInfoController.java:63)
	at sun.reflect.GeneratedMethodAccessor82.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-12-15 12:24:00.805 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:24:00.805 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:24:00.806 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:24:00.806 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:24:00.807 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:24:00.807Z
2019-12-15 12:24:00.808 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:24:00.808 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 8
2019-12-15 12:24:00.809 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:24:00.809 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:24:00.809 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:24:00.809 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:24:00.812 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:24:00.812
2019-12-15 12:24:00.812 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:24:00.814 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 27
2019-12-15 12:24:00.814 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:24:00.815 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:24:00.819 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:24:00.820 [39mDEBUG[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:24:00.832 [34mINFO[0;39m [35m[http-nio-2020-exec-9][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:24:14.147 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Removing {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 12:24:14.147 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 0 subscriber(s).
2019-12-15 12:24:14.148 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.stop :: stopped _org.springframework.integration.errorLogger
2019-12-15 12:24:14.149 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskScheduler.shutdown :: Shutting down ExecutorService 'taskScheduler'
2019-12-15 12:24:14.152 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskExecutor.shutdown :: Shutting down ExecutorService 'applicationTaskExecutor'
2019-12-15 12:24:14.153 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown initiated...
2019-12-15 12:24:14.161 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown completed.
2019-12-15 12:25:06.785 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarting :: Starting SearchFoodApplication on eason-UX410UQK with PID 8853 (/home/eason/Desktop/Workplace/Projects/SearchFoodBackend/target/classes started by eason in /home/eason/Desktop/Workplace/Projects/SearchFoodBackend)
2019-12-15 12:25:06.788 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStartupProfileInfo :: No active profile set, falling back to default profiles: default
2019-12-15 12:25:08.159 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel :: No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2019-12-15 12:25:08.167 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler :: No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2019-12-15 12:25:08.174 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerHeaderChannelRegistry :: No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2019-12-15 12:25:08.318 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d6b19aa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:25:08.349 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration$$EnhancerBySpringCGLIB$$785cd4d9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:25:08.370 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 12:25:08.755 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.initialize :: Tomcat initialized with port(s): 2020 (http)
2019-12-15 12:25:08.790 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardService.log :: Starting service [Tomcat]
2019-12-15 12:25:08.791 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardEngine.log :: Starting Servlet engine: [Apache Tomcat/9.0.22]
2019-12-15 12:25:08.887 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring embedded WebApplicationContext
2019-12-15 12:25:08.888 [34mINFO[0;39m [35m[main][0;39m o.s.w.c.ContextLoader.prepareWebApplicationContext :: Root WebApplicationContext: initialization completed in 2055 ms
2019-12-15 12:25:09.166 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Starting...
2019-12-15 12:25:09.775 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Start completed.
2019-12-15 12:25:10.213 [39mDEBUG[0;39m [35m[main][0;39m c.s.S.u.f.FileStorageService.<init> :: fileStorageLocation: src/main/resources/uploads/images
2019-12-15 12:25:10.558 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskExecutor.initialize :: Initializing ExecutorService 'applicationTaskExecutor'
2019-12-15 12:25:11.040 [34mINFO[0;39m [35m[main][0;39m o.s.b.a.e.w.EndpointLinksResolver.<init> :: Exposing 2 endpoint(s) beneath base path '/actuator'
2019-12-15 12:25:11.139 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskScheduler.initialize :: Initializing ExecutorService 'taskScheduler'
2019-12-15 12:25:11.213 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 12:25:11.214 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 1 subscriber(s).
2019-12-15 12:25:11.215 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.start :: started _org.springframework.integration.errorLogger
2019-12-15 12:25:11.278 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.start :: Tomcat started on port(s): 2020 (http) with context path ''
2019-12-15 12:25:11.281 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarted :: Started SearchFoodApplication in 5.117 seconds (JVM running for 9.637)
2019-12-15 12:25:15.752 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-15 12:25:15.753 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Initializing Servlet 'dispatcherServlet'
2019-12-15 12:25:15.768 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Completed initialization in 14 ms
2019-12-15 12:25:15.846 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Processing getStoreTypes...
2019-12-15 12:25:15.847 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:25:15.911 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:25:15.910Z
2019-12-15 12:25:15.911 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:25:15.911 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 9
2019-12-15 12:25:15.911 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:25:15.912 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:25:15.912 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Valid token
2019-12-15 12:25:15.912 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Trying to load the food types from databases...
2019-12-15 12:25:15.925 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: start to get data...
2019-12-15 12:25:15.925 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: query data from database in the form of List...
2019-12-15 12:25:15.930 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: Start to change List to JSONArray...
2019-12-15 12:25:15.931 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.toMap :: forEach...
2019-12-15 12:25:15.932 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.toMap :: resultMap {速食=[麥當勞, 肯德基, 胖老爹, 頂呱呱], 麵食=[陽春麵, 涼麵, 油麵, 義大利麵, 拉麵], 飯=[三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]}
2019-12-15 12:25:15.943 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: Finished
2019-12-15 12:25:25.515 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:25:25.515 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:25:25.516 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:25:25.516 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:25:25.518 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:25:25.518Z
2019-12-15 12:25:25.520 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:25:25.520 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 9
2019-12-15 12:25:25.521 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:25:25.521 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:25:25.522 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:25:25.523 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:25:25.558 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:25:25.557
2019-12-15 12:25:25.558 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:25:25.589 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 28
2019-12-15 12:25:25.589 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:25:25.593 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:25:25.594 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:25:25.595 [39mDEBUG[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:25:25.631 [34mINFO[0;39m [35m[http-nio-2020-exec-3][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:25:44.614 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:25:44.614 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:25:44.615 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:25:44.615 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:25:44.617 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:25:44.617Z
2019-12-15 12:25:44.618 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:25:44.618 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 9
2019-12-15 12:25:44.619 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:25:44.619 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:25:44.620 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:25:44.620 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:25:44.621 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:25:44.621
2019-12-15 12:25:44.622 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:25:44.624 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 29
2019-12-15 12:25:44.625 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:25:44.627 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:25:44.627 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:25:44.628 [39mDEBUG[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:25:44.645 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:26:02.920 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:26:02.921 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:26:02.921 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:26:02.922 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:26:02.924 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:26:02.924Z
2019-12-15 12:26:02.924 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:26:02.925 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 10
2019-12-15 12:26:02.925 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:26:02.925 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:26:02.926 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:26:02.926 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:26:02.928 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:26:02.928
2019-12-15 12:26:02.928 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食]
2019-12-15 12:26:03.062 [1;31mERROR[0;39m [35m[http-nio-2020-exec-4][0;39m o.a.c.c.C.[.[.[.[dispatcherServlet].log :: Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; Duplicate entry '桃源市-中壢區-中原路122號' for key 'city'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '桃源市-中壢區-中原路122號' for key 'city'] with root cause
java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '桃源市-中壢區-中原路122號' for key 'city'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1092)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1040)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1340)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1025)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$update$1(JdbcTemplate.java:893)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:616)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:892)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp.save(StoreInfoImp.java:78)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp.createNewStoreInfoToDatabase(StoreInfoImp.java:67)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp$$FastClassBySpringCGLIB$$311c6bdd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.searchfood.SearchFoodBackend.model.StoreInfoImp$$EnhancerBySpringCGLIB$$5a164648.createNewStoreInfoToDatabase(<generated>)
	at com.searchfood.SearchFoodBackend.model.StoreInfoTransactionImp.createNewStoreInfoToDatabase(StoreInfoTransactionImp.java:29)
	at com.searchfood.SearchFoodBackend.model.StoreInfoTransactionImp$$FastClassBySpringCGLIB$$d6a09f5d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.searchfood.SearchFoodBackend.model.StoreInfoTransactionImp$$EnhancerBySpringCGLIB$$7725f7ef.createNewStoreInfoToDatabase(<generated>)
	at com.searchfood.SearchFoodBackend.webapi.StoreInfoController.createNewStoreInfo(StoreInfoController.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-12-15 12:26:08.205 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:26:08.205 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:26:08.206 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:26:08.206 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:26:08.208 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:26:08.208Z
2019-12-15 12:26:08.208 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:26:08.208 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 10
2019-12-15 12:26:08.208 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:26:08.209 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:26:08.209 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:26:08.209 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:26:08.210 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:26:08.21
2019-12-15 12:26:08.210 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食]
2019-12-15 12:26:08.212 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 31
2019-12-15 12:26:08.212 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:26:08.218 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞]
2019-12-15 12:26:08.219 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12]
2019-12-15 12:26:08.219 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12]
2019-12-15 12:26:08.224 [34mINFO[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:26:21.744 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: JP2
2019-12-15 12:26:21.744 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=123, long=2332}
2019-12-15 12:26:21.745 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 12:26:21.745 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 12:26:21.752 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T04:26:21.751Z
2019-12-15 12:26:21.752 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T04:15:59Z
2019-12-15 12:26:21.753 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 10
2019-12-15 12:26:21.754 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.check :: The username of b82d370d-46d8-4c46-b794-703348572510 is Admin@test1.com
2019-12-15 12:26:21.759 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 12:26:21.760 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 12:26:21.761 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 12:26:21.763 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: Admin@test1.com	storeName: JP2. At 2019-12-15 12:26:21.763
2019-12-15 12:26:21.765 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 12:26:21.768 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 32
2019-12-15 12:26:21.769 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:00~18:00, 星期二=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期六=09:00~18:00, 星期日=off}
2019-12-15 12:26:21.770 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 頂呱呱, 胖老爹, 油麵, 涼麵, 義大利麵, 陽春麵, 粄條, 白麵, 炒飯, 燴飯, 滷肉飯, 豬排飯, 三寶飯]
2019-12-15 12:26:21.770 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:26:21.771 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 15, 14, 9, 8, 10, 7, 4, 5, 2, 3, 1]
2019-12-15 12:26:21.785 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Admin@test1.com has created the new store info JP2.
2019-12-15 12:26:25.078 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Removing {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 12:26:25.080 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 0 subscriber(s).
2019-12-15 12:26:25.081 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.stop :: stopped _org.springframework.integration.errorLogger
2019-12-15 12:26:25.084 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskScheduler.shutdown :: Shutting down ExecutorService 'taskScheduler'
2019-12-15 12:26:25.091 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskExecutor.shutdown :: Shutting down ExecutorService 'applicationTaskExecutor'
2019-12-15 12:26:25.093 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown initiated...
2019-12-15 12:26:25.110 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown completed.
2019-12-15 15:46:30.573 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarting :: Starting SearchFoodApplication on eason-UX410UQK with PID 15772 (/home/eason/Desktop/Workplace/Projects/SearchFoodBackend/target/classes started by eason in /home/eason/Desktop/Workplace/Projects/SearchFoodBackend)
2019-12-15 15:46:30.582 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStartupProfileInfo :: No active profile set, falling back to default profiles: default
2019-12-15 15:46:32.310 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel :: No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2019-12-15 15:46:32.323 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler :: No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2019-12-15 15:46:32.330 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerHeaderChannelRegistry :: No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2019-12-15 15:46:32.520 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f0517272] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 15:46:32.554 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration$$EnhancerBySpringCGLIB$$5b432da1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 15:46:32.581 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 15:46:33.019 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.initialize :: Tomcat initialized with port(s): 2020 (http)
2019-12-15 15:46:33.068 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardService.log :: Starting service [Tomcat]
2019-12-15 15:46:33.069 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardEngine.log :: Starting Servlet engine: [Apache Tomcat/9.0.22]
2019-12-15 15:46:33.183 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring embedded WebApplicationContext
2019-12-15 15:46:33.184 [34mINFO[0;39m [35m[main][0;39m o.s.w.c.ContextLoader.prepareWebApplicationContext :: Root WebApplicationContext: initialization completed in 2506 ms
2019-12-15 15:46:33.538 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Starting...
2019-12-15 15:46:34.334 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Start completed.
2019-12-15 15:46:34.901 [39mDEBUG[0;39m [35m[main][0;39m c.s.S.u.f.FileStorageService.<init> :: fileStorageLocation: src/main/resources/uploads/images
2019-12-15 15:46:35.310 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskExecutor.initialize :: Initializing ExecutorService 'applicationTaskExecutor'
2019-12-15 15:46:36.262 [34mINFO[0;39m [35m[main][0;39m o.s.b.a.e.w.EndpointLinksResolver.<init> :: Exposing 2 endpoint(s) beneath base path '/actuator'
2019-12-15 15:46:36.428 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskScheduler.initialize :: Initializing ExecutorService 'taskScheduler'
2019-12-15 15:46:36.549 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 15:46:36.550 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 1 subscriber(s).
2019-12-15 15:46:36.550 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.start :: started _org.springframework.integration.errorLogger
2019-12-15 15:46:36.665 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.start :: Tomcat started on port(s): 2020 (http) with context path ''
2019-12-15 15:46:36.669 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarted :: Started SearchFoodApplication in 7.235 seconds (JVM running for 13.584)
2019-12-15 16:12:27.189 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-15 16:12:27.190 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Initializing Servlet 'dispatcherServlet'
2019-12-15 16:12:27.204 [34mINFO[0;39m [35m[http-nio-2020-exec-2][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Completed initialization in 14 ms
2019-12-15 16:12:27.488 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.SignUpController.signUp :: TESTING: username: tvjs168@gmail.com password: 123456789 birthyear: 1993 sex: 0
2019-12-15 16:12:31.699 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.m.SendSignUpMailService.sendEmail :: Sending email to tvjs168@gmail.com!!!
2019-12-15 16:12:31.702 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.SignUpController.signUp :: tvjs168@gmail.com sign up successfully.
2019-12-15 16:12:42.699 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Processing getStoreTypes...
2019-12-15 16:12:42.699 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 16:12:42.737 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T08:12:42.736Z
2019-12-15 16:12:42.738 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T08:12:27Z
2019-12-15 16:12:42.738 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 0
2019-12-15 16:12:42.739 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.check :: The username of bebc0d72-f5e4-4219-a5a5-8c239a059333 is tvjs168@gmail.com
2019-12-15 16:12:42.739 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 16:12:42.739 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Valid token
2019-12-15 16:12:42.740 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Trying to load the food types from databases...
2019-12-15 16:12:42.755 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: start to get data...
2019-12-15 16:12:42.756 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: query data from database in the form of List...
2019-12-15 16:12:42.769 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: Start to change List to JSONArray...
2019-12-15 16:12:42.771 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.toMap :: forEach...
2019-12-15 16:12:42.772 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.toMap :: resultMap {速食=[麥當勞, 肯德基, 胖老爹, 頂呱呱], 麵食=[陽春麵, 涼麵, 油麵, 義大利麵, 拉麵], 飯=[三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]}
2019-12-15 16:12:42.772 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: Finished
2019-12-15 16:13:30.401 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: Qburger
2019-12-15 16:13:30.401 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=25, long=121}
2019-12-15 16:13:30.402 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 16:13:30.402 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 16:13:30.405 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T08:13:30.405Z
2019-12-15 16:13:30.406 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T08:12:27Z
2019-12-15 16:13:30.406 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 1
2019-12-15 16:13:30.407 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.check :: The username of Token bebc0d72-f5e4-4219-a5a5-8c239a059333 is tvjs168@gmail.com
2019-12-15 16:13:30.407 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 16:13:30.408 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 16:13:30.408 [31mWARN[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for build new store infomation is invalid.
2019-12-15 16:13:30.410 [31mWARN[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.e.ControllerException.handleInvalidDataException :: In ControllerException: InvalidDataException
2019-12-15 16:14:27.689 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Removing {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 16:14:27.690 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 0 subscriber(s).
2019-12-15 16:14:27.690 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.stop :: stopped _org.springframework.integration.errorLogger
2019-12-15 16:14:27.691 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskScheduler.shutdown :: Shutting down ExecutorService 'taskScheduler'
2019-12-15 16:14:27.695 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskExecutor.shutdown :: Shutting down ExecutorService 'applicationTaskExecutor'
2019-12-15 16:14:27.697 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown initiated...
2019-12-15 16:14:27.709 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown completed.
2019-12-15 16:16:25.625 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarting :: Starting SearchFoodApplication on eason-UX410UQK with PID 16657 (/home/eason/Desktop/Workplace/Projects/SearchFoodBackend/target/classes started by eason in /home/eason/Desktop/Workplace/Projects/SearchFoodBackend)
2019-12-15 16:16:25.628 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStartupProfileInfo :: No active profile set, falling back to default profiles: default
2019-12-15 16:16:27.041 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel :: No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2019-12-15 16:16:27.047 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler :: No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2019-12-15 16:16:27.052 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerHeaderChannelRegistry :: No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2019-12-15 16:16:27.182 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ddfb0bc5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 16:16:27.207 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration$$EnhancerBySpringCGLIB$$48ecc6f4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 16:16:27.227 [34mINFO[0;39m [35m[main][0;39m o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization :: Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-15 16:16:27.541 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.initialize :: Tomcat initialized with port(s): 2020 (http)
2019-12-15 16:16:27.577 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardService.log :: Starting service [Tomcat]
2019-12-15 16:16:27.578 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.StandardEngine.log :: Starting Servlet engine: [Apache Tomcat/9.0.22]
2019-12-15 16:16:27.692 [34mINFO[0;39m [35m[main][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring embedded WebApplicationContext
2019-12-15 16:16:27.693 [34mINFO[0;39m [35m[main][0;39m o.s.w.c.ContextLoader.prepareWebApplicationContext :: Root WebApplicationContext: initialization completed in 2004 ms
2019-12-15 16:16:27.978 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Starting...
2019-12-15 16:16:28.615 [34mINFO[0;39m [35m[main][0;39m c.z.h.HikariDataSource.getConnection :: HikariPool-1 - Start completed.
2019-12-15 16:16:29.055 [39mDEBUG[0;39m [35m[main][0;39m c.s.S.u.f.FileStorageService.<init> :: fileStorageLocation: src/main/resources/uploads/images
2019-12-15 16:16:29.325 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskExecutor.initialize :: Initializing ExecutorService 'applicationTaskExecutor'
2019-12-15 16:16:29.805 [34mINFO[0;39m [35m[main][0;39m o.s.b.a.e.w.EndpointLinksResolver.<init> :: Exposing 2 endpoint(s) beneath base path '/actuator'
2019-12-15 16:16:29.902 [34mINFO[0;39m [35m[main][0;39m o.s.s.c.ThreadPoolTaskScheduler.initialize :: Initializing ExecutorService 'taskScheduler'
2019-12-15 16:16:29.975 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 16:16:29.976 [34mINFO[0;39m [35m[main][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 1 subscriber(s).
2019-12-15 16:16:29.976 [34mINFO[0;39m [35m[main][0;39m o.s.i.e.EventDrivenConsumer.start :: started _org.springframework.integration.errorLogger
2019-12-15 16:16:30.037 [34mINFO[0;39m [35m[main][0;39m o.s.b.w.e.t.TomcatWebServer.start :: Tomcat started on port(s): 2020 (http) with context path ''
2019-12-15 16:16:30.040 [34mINFO[0;39m [35m[main][0;39m c.s.S.SearchFoodApplication.logStarted :: Started SearchFoodApplication in 4.948 seconds (JVM running for 8.908)
2019-12-15 16:16:33.462 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.a.c.c.C.[.[.[/].log :: Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-15 16:16:33.467 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Initializing Servlet 'dispatcherServlet'
2019-12-15 16:16:33.496 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m o.s.w.s.DispatcherServlet.initServletBean :: Completed initialization in 28 ms
2019-12-15 16:16:33.610 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Processing getStoreTypes...
2019-12-15 16:16:33.612 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 16:16:33.715 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T08:16:33.713Z
2019-12-15 16:16:33.716 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T08:12:27Z
2019-12-15 16:16:33.717 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 4
2019-12-15 16:16:33.720 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.CheckTokenImp.check :: The username of bebc0d72-f5e4-4219-a5a5-8c239a059333 is tvjs168@gmail.com
2019-12-15 16:16:33.721 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 16:16:33.721 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Valid token
2019-12-15 16:16:33.722 [34mINFO[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Trying to load the food types from databases...
2019-12-15 16:16:33.728 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: start to get data...
2019-12-15 16:16:33.728 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: query data from database in the form of List...
2019-12-15 16:16:33.740 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: Start to change List to JSONArray...
2019-12-15 16:16:33.741 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.toMap :: forEach...
2019-12-15 16:16:33.742 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.toMap :: resultMap {速食=[麥當勞, 肯德基, 胖老爹, 頂呱呱], 麵食=[陽春麵, 涼麵, 油麵, 義大利麵, 拉麵], 飯=[三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]}
2019-12-15 16:16:33.743 [39mDEBUG[0;39m [35m[http-nio-2020-exec-1][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: Finished
2019-12-15 16:18:58.073 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: Qburger
2019-12-15 16:18:58.074 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=25, long=121}
2019-12-15 16:18:58.074 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 16:18:58.074 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 16:18:58.079 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T08:18:58.079Z
2019-12-15 16:18:58.080 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T08:12:27Z
2019-12-15 16:18:58.080 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 6
2019-12-15 16:18:58.081 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.CheckTokenImp.check :: The username of Token bebc0d72-f5e4-4219-a5a5-8c239a059333 is tvjs168@gmail.com
2019-12-15 16:18:58.082 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 16:18:58.082 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 16:18:58.083 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 16:18:58.105 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: tvjs168@gmail.com	storeName: Qburger. At 2019-12-15 16:18:58.104
2019-12-15 16:18:58.106 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 16:18:58.121 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 33
2019-12-15 16:18:58.122 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:30-18:30, 星期二=09:30-18:30, 星期三=09:30-18:30, 星期四=09:30-18:30, 星期五=09:30-18:30, 星期六=off, 星期日=off}
2019-12-15 16:18:58.124 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 胖老爹, 頂呱呱, 陽春麵, 涼麵, 油麵, 義大利麵, 拉麵, 三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]
2019-12-15 16:18:58.125 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 14, 15, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6]
2019-12-15 16:18:58.126 [39mDEBUG[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 14, 15, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6]
2019-12-15 16:18:58.157 [34mINFO[0;39m [35m[http-nio-2020-exec-4][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tvjs168@gmail.com has created the new store info Qburger.
2019-12-15 16:19:17.185 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.SearchController.getSearchResults :: foodKeyWords: 飯, city: , district: 
2019-12-15 16:19:17.186 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.w.SearchController.getSearchResults :: Search by Food Key Word.
2019-12-15 16:19:17.193 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.SearchStoresImp.getSearchByFoodKeyWord :: By Food Key Word
2019-12-15 16:19:17.223 [39mDEBUG[0;39m [35m[http-nio-2020-exec-5][0;39m c.s.S.m.SearchStoresImp.searchFromStoreInfo :: resultList: [{address=中正路1號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=1, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路2號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=2, slogan=null, tags=[麵食,  飯]}, {address=中正路3號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=3, slogan=null, tags=[速食,  飯]}, {address=中正路5號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=4, slogan=null, tags=[速食,  飯]}, {address=中正路5號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=5, slogan=null, tags=[速食,  飯]}, {address=中正路51號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=6, slogan=null, tags=[速食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=7, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=台南市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=8, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=新竹市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=9, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=中正區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=13, slogan=null, tags=[麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=中和區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=14, slogan=null, tags=[麵食,  飯]}, {address=金城路53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=土城區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=15, slogan=null, tags=[速食,  麵食,  飯]}, {address=中華路二段53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=土城區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=16, slogan=null, tags=[速食,  麵食,  飯]}, {address=芎林二段53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=土城區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=17, slogan=null, tags=[速食,  麵食,  飯]}, {address=中華路二段53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=樹林區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=18, slogan=null, tags=[飯]}, {address=中華路二段1號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=樹林區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=20, slogan=null, tags=[速食,  麵食,  飯]}, {address=中華路二段1號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=21, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道二段1號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=22, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道七段1號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=23, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道六段122號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=27, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道七段122號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=28, slogan=null, tags=[速食,  麵食,  飯]}, {address=中原路122號, createdDate=2019-12-15, star=0.0, city=桃源市, latLong={lat=123, long=2332}, district=中壢區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=29, slogan=null, tags=[速食,  麵食,  飯]}, {address=中壢路122號, createdDate=2019-12-15, star=0.0, city=桃源市, latLong={lat=123, long=2332}, district=中壢區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=32, slogan=null, tags=[速食,  麵食,  飯]}, {address=民生西路12號6樓, createdDate=2019-12-15, star=0.0, city=臺北市, latLong={lat=25, long=121}, district=大安區, businessHours={星期二=09:30-18:30, 星期六=off, 星期三=09:30-18:30, 星期四=09:30-18:30, 星期五=09:30-18:30, 星期日=off, 星期一=09:30-18:30}, storename=Qburger, tel=0912232112, storeId=33, slogan=null, tags=[速食,  麵食,  飯]}]
2019-12-15 16:19:56.686 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Processing getStoreTypes...
2019-12-15 16:19:56.687 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 16:19:56.689 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T08:19:56.689Z
2019-12-15 16:19:56.689 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T08:12:27Z
2019-12-15 16:19:56.689 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 7
2019-12-15 16:19:56.690 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.CheckTokenImp.check :: The username of bebc0d72-f5e4-4219-a5a5-8c239a059333 is tvjs168@gmail.com
2019-12-15 16:19:56.690 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 16:19:56.691 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Valid token
2019-12-15 16:19:56.692 [34mINFO[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.w.GetAllMenuController.getStoreTypes :: Trying to load the food types from databases...
2019-12-15 16:19:56.693 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: start to get data...
2019-12-15 16:19:56.693 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: query data from database in the form of List...
2019-12-15 16:19:56.696 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getQueryResults :: Start to change List to JSONArray...
2019-12-15 16:19:56.697 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.toMap :: forEach...
2019-12-15 16:19:56.698 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.toMap :: resultMap {速食=[麥當勞, 肯德基, 胖老爹, 頂呱呱], 麵食=[陽春麵, 涼麵, 油麵, 義大利麵, 拉麵], 飯=[三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]}
2019-12-15 16:19:56.698 [39mDEBUG[0;39m [35m[http-nio-2020-exec-6][0;39m c.s.S.m.GetFoodTypesImp.getFoodTypesMap :: Finished
2019-12-15 16:20:56.403 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: storename: 餐櫃
2019-12-15 16:20:56.404 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: latlong: {lat=25, long=121}
2019-12-15 16:20:56.404 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tags: null
2019-12-15 16:20:56.405 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Checking token...
2019-12-15 16:20:56.408 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: now: 2019-12-15T08:20:56.408Z
2019-12-15 16:20:56.409 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: loginTime: 2019-12-15T08:12:27Z
2019-12-15 16:20:56.409 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.isExist :: Duration: 8
2019-12-15 16:20:56.410 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.CheckTokenImp.check :: The username of Token bebc0d72-f5e4-4219-a5a5-8c239a059333 is tvjs168@gmail.com
2019-12-15 16:20:56.410 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.u.CheckTokensController.check :: Valid token
2019-12-15 16:20:56.410 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: Valid token
2019-12-15 16:20:56.411 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: The data for building new store infomation is valid.
2019-12-15 16:20:56.412 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: username: tvjs168@gmail.com	storeName: 餐櫃. At 2019-12-15 16:20:56.412
2019-12-15 16:20:56.412 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.createNewStoreInfoToDatabase :: tags: [速食, 麵食, 飯]
2019-12-15 16:20:56.414 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: Afer updating StoreInfo, the storeId is 34
2019-12-15 16:20:56.414 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: BusinessHours are {星期一=09:30-18:30, 星期二=09:30-18:30, 星期三=off, 星期四=09:30-18:30, 星期五=09:30-18:30, 星期六=09:30-21:30, 星期日=off}
2019-12-15 16:20:56.417 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The details of food types: [麥當勞, 肯德基, 胖老爹, 頂呱呱, 陽春麵, 涼麵, 油麵, 義大利麵, 拉麵, 三寶飯, 滷肉飯, 豬排飯, 炒飯, 燴飯, 油飯]
2019-12-15 16:20:56.418 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.GetFoodTypesImp.getStoreMenuList :: foodIdList: [12, 13, 14, 15, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6]
2019-12-15 16:20:56.418 [39mDEBUG[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.m.StoreInfoImp.save :: The foodId of details.[12, 13, 14, 15, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6]
2019-12-15 16:20:56.438 [34mINFO[0;39m [35m[http-nio-2020-exec-7][0;39m c.s.S.w.StoreInfoController.createNewStoreInfo :: tvjs168@gmail.com has created the new store info 餐櫃.
2019-12-15 16:21:03.214 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.SearchController.getSearchResults :: foodKeyWords: 飯, city: , district: 
2019-12-15 16:21:03.215 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.w.SearchController.getSearchResults :: Search by Food Key Word.
2019-12-15 16:21:03.215 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.SearchStoresImp.getSearchByFoodKeyWord :: By Food Key Word
2019-12-15 16:21:03.221 [39mDEBUG[0;39m [35m[http-nio-2020-exec-8][0;39m c.s.S.m.SearchStoresImp.searchFromStoreInfo :: resultList: [{address=中正路1號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=1, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路2號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=2, slogan=null, tags=[麵食,  飯]}, {address=中正路3號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=3, slogan=null, tags=[速食,  飯]}, {address=中正路5號, createdDate=2019-12-15, star=0.0, city=台北市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=4, slogan=null, tags=[速食,  飯]}, {address=中正路5號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=5, slogan=null, tags=[速食,  飯]}, {address=中正路51號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=6, slogan=null, tags=[速食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=7, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=台南市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=8, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=新竹市, latLong={lat=123, long=2332}, district=中山區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=9, slogan=null, tags=[速食,  麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=中正區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=13, slogan=null, tags=[麵食,  飯]}, {address=中正路53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=中和區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=14, slogan=null, tags=[麵食,  飯]}, {address=金城路53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=土城區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=15, slogan=null, tags=[速食,  麵食,  飯]}, {address=中華路二段53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=土城區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=16, slogan=null, tags=[速食,  麵食,  飯]}, {address=芎林二段53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=土城區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=17, slogan=null, tags=[速食,  麵食,  飯]}, {address=中華路二段53號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=樹林區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=18, slogan=null, tags=[飯]}, {address=中華路二段1號, createdDate=2019-12-15, star=0.0, city=新北市, latLong={lat=123, long=2332}, district=樹林區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=20, slogan=null, tags=[速食,  麵食,  飯]}, {address=中華路二段1號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=21, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道二段1號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=22, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道七段1號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=23, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道六段122號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=27, slogan=null, tags=[速食,  麵食,  飯]}, {address=台灣大道七段122號, createdDate=2019-12-15, star=0.0, city=台中市, latLong={lat=123, long=2332}, district=西屯區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=28, slogan=null, tags=[速食,  麵食,  飯]}, {address=中原路122號, createdDate=2019-12-15, star=0.0, city=桃源市, latLong={lat=123, long=2332}, district=中壢區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=29, slogan=null, tags=[速食,  麵食,  飯]}, {address=中壢路122號, createdDate=2019-12-15, star=0.0, city=桃源市, latLong={lat=123, long=2332}, district=中壢區, businessHours={星期二=09:00~18:00, 星期六=09:00~18:00, 星期三=09:00~18:00, 星期四=09:00~18:00, 星期五=09:00~18:00, 星期日=off, 星期一=09:00~18:00}, storename=JP2, tel=0912332123, storeId=32, slogan=null, tags=[速食,  麵食,  飯]}, {address=民生西路12號6樓, createdDate=2019-12-15, star=0.0, city=臺北市, latLong={lat=25, long=121}, district=大安區, businessHours={星期二=09:30-18:30, 星期六=off, 星期三=09:30-18:30, 星期四=09:30-18:30, 星期五=09:30-18:30, 星期日=off, 星期一=09:30-18:30}, storename=Qburger, tel=0912232112, storeId=33, slogan=null, tags=[速食,  麵食,  飯]}, {address=國姓路32巷18號, createdDate=2019-12-15, star=0.0, city=南投縣, latLong={lat=25, long=121}, district=草屯鎮, businessHours={星期二=09:30-18:30, 星期六=09:30-21:30, 星期三=off, 星期四=09:30-18:30, 星期五=09:30-18:30, 星期日=off, 星期一=09:30-18:30}, storename=餐櫃, tel=0988653902, storeId=34, slogan=null, tags=[速食,  麵食,  飯]}]
2019-12-15 16:21:51.041 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.logComponentSubscriptionEvent :: Removing {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2019-12-15 16:21:51.041 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary :: Channel 'application.errorChannel' has 0 subscriber(s).
2019-12-15 16:21:51.041 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.i.e.EventDrivenConsumer.stop :: stopped _org.springframework.integration.errorLogger
2019-12-15 16:21:51.042 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskScheduler.shutdown :: Shutting down ExecutorService 'taskScheduler'
2019-12-15 16:21:51.046 [34mINFO[0;39m [35m[Thread-4][0;39m o.s.s.c.ThreadPoolTaskExecutor.shutdown :: Shutting down ExecutorService 'applicationTaskExecutor'
2019-12-15 16:21:51.047 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown initiated...
2019-12-15 16:21:51.067 [34mINFO[0;39m [35m[Thread-4][0;39m c.z.h.HikariDataSource.close :: HikariPool-1 - Shutdown completed.
